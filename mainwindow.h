#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include "qfile.h"
struct T {
    double begin_i;
    double end_i;
};
namespace Ui {
class MainWindow;
}

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    explicit MainWindow(QWidget *parent = 0);
    ~MainWindow();

private slots:
    void choose_file_button_clicked();
    void info_button_clicked();
    void intervals_button_clicked();
    void result_button_clicked();
    void comboBox_changed();

private:
    Ui::MainWindow *ui;


    QVector<double> started_data;
    QVector<QVector<double> > intervals;
    QVector<double> middle_value;
    QVector<double> average_data_of_intervals;
    QVector<double> xi_sq;
    QVector<int> n_i;//число результатов измерений, которое должно быть в данном интервале
                                    //если оно было бы нормальным

    QVector<T> inter;  // структура интервалов
    QVector<double> middle_value2;
    const QVector<QVector<double> > quantile_table= {{0.99,    0.98,   0.95,   0.90,   0.80,   0.20,   0.10,   0.05,   0.02,   0.01,   0.001 },
                                               {0.00016, 0.00063,0.00393,0.0158, 0.0642, 1.642, 	2.706, 	3.841, 	5.412, 	6.635, 	10.827},
                                               {0.0201, 	0.0404, 0.103, 	0.211, 	0.446, 	3.219, 	4.605, 	5.991, 	7.824, 	9.210, 	13.815},
                                               {0.115, 	0.185, 	0.352, 	0.584, 	1.005, 	4.642, 	6.251, 	7.815, 	9.837,  11.341,	16.268},
                                               {0.297, 	0.429, 	0.711, 	1.064, 	1.649, 	5.989, 	7.779, 	9.488, 	11.668,	13.277, 18.465},
                                               {0.554, 	0.752, 	1.145, 	1.610, 	2.343, 	7.289, 	9.236, 	11.070, 13.388,	15.086,	20.517},
                                               {0.872, 	1.134, 	1.635, 	2.204,	3.070, 	8.558, 	10.645, 12.592, 15.033,	16.812, 22.457},
                                               {1.239, 	1.564, 	2.167, 	2.833, 	3.822,	9.803, 	12.017,	14.067, 16.622,	18.475,	24.322},
                                               {1.646, 	2.032,	2.733, 	3.490, 	4.594, 	11.030,	13.362,	15.507, 18.679,	20.090,	26.125},
                                               {2.088, 	2.532, 	3.325, 	4.168, 	5.380, 	12.242,	14.684,	16.919, 19.679,	21.666,	27.877},
                                               {2.588, 	3.059, 	3.940, 	4.865,	6.179, 	13.442,	15.987, 18.307, 21.161,	23.209,	29.588},
                                               {3.053, 	3.609, 	4.575, 	5.578, 	6.989, 	14.631,	17.275,	19.675, 22.618,	24.725,	31.264},
                                               {3.571, 	4.178, 	5.226, 	6.304, 	7.807, 	15.812,	18.549,	21.026, 24.054,	26.217,	32.909},
                                               {4.107, 	4.765, 	5.892, 	7.042, 	8.634, 	16.985,	19.812,	22.362, 25.472,	27.688,	34.528},
                                               {4.660, 	5.368, 	6.571, 	7.790, 	9.467, 	18.151,	21.064,	23.685, 26.873,	29.141,	36.123},
                                               {5.229, 	5.985, 	7.262, 	8.547, 	10.307,	19.311,	22.307,	24.996,	28.259,	30.578,	37.697},
                                               {5.812, 	6.614, 	7.962, 	9.312, 	11.152,	20.465,	23.542,	26.296,	29.633,	32.000,	39.252},
                                               {6.408, 	7.255, 	8.672, 	10.085, 12.002,	21.615,	24.769,	27.587,	30.995,	33.409,	40.790},
                                               {7.015, 	7.906, 	9.390, 	10.865,	12.857,	22.760,	25.989,	28.869, 32.346,	34.805,	42.312},
                                               {7.633, 	8.567, 	10.117, 11.651,	13.716,	23.900,	27.204,	30.144,	33.687,	36.191,	43.820},
                                               {8.260, 	9.237, 	10.851, 12.443,	14.578,	25.038,	28.412,	31.410,	35.020,	37.566,	45.315},
                                               {8.897, 	9.915, 	11.591, 13.240, 15.445,	26.171, 29.615,	32.671,	36.343,	38.932,	46.797},
                                               {9.542,	10.600, 12.338, 14.041, 16.314,	27.301,	30.813,	33.924,	37.659,	40.289,	48.268},
                                               {10.196, 	11.298, 13.091, 14.848, 17.187,	28.429,	32.007,	35.172,	38.968,	41.638,	49.728},
                                               {10.856, 	11.992, 13.848, 15.659, 18.062,	29.553, 33.196,	36.415,	40.270,	42.980,	51.179},
                                               {11.542, 	12.697, 14.611, 16.473, 18.940,	30.675,	34.382,	37.652,	41.566,	44.314,	52.620},
                                               {12.198, 	13.409, 15.379, 17.292, 19.820,	31.795,	35.563,	38.885,	42.856,	45.642,	54.052},
                                               {12.879, 	14.125, 16.151, 18.114, 20.703,	32.912,	86.741,	40.113,	44.140,	46.963,	55.476},
                                               {13.565, 	14.847, 16.928, 18.939, 21.588, 34.027,	37.916,	41.337,	45.419,	48.278,	56.893},
                                               {14.256, 	15.574, 17.708, 19.768, 22.475, 35.139,	39.087,	42.557,	46.693,	49.588,	58.302},
                                               {14.953, 	16.306, 18.493, 20.599, 23.364, 36.250,	40.256,	43.773,	47.962,	50.892,	59.703},
                                         };


    bool is_chButton_clicked_flag = false;


    double max_x = 0, min_x = 0;
    double average_data = 0;// среднее значение x
    double S; // среднеквадратическое отклонение S группы
    double Sx; //Среднее квадратическое отклонение среднего арифметического
                                    //(оценки измеряемой величины)
    int r; //   количество интервалов
    double h; //ширина интервала
    const int k = 2;// число параметров предпологаемого распределения.Оно равно 2м, т.к.
                                    //предполагается, что оно нормальное
    int f;// число степеней свободы
    double koef; // коэффициент при вычислении ni равный n*h/S;
    double xi = 0;
    double a = 0.001;
    double quantile = 0;

    void set_average_data();
    void set_square_deviation();
    void set_Sx();
    void set_r();
    void set_h() {h = (max_x - min_x)/static_cast<double>(r);}
    void set_f() {f = r - k - 1;}
    void fill_intervals();
    void set_middle_value();

    void set_middle_value2();

    void set_koef() {koef = started_data.size() * h / S; }
    void set_average_of_intervals();
    void set_n_i();
    void set_xi_sq();
    void choose_quantile();
    void check_result();


    void clear_data();
    void set_lines();
    void clear_lines();
};

#endif // MAINWINDOW_H





